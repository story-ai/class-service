service: story-class

provider:
  name: aws
  region: eu-west-2
  runtime: nodejs6.10
  stage: dev
  profile: serverless

plugins:
  - serverless-plugin-typescript  # compile our handlers
  - serverless-offline            # enjoy a local dev env 
  - serverless-aws-documentation  # generate documentation on deploy
  - serverless-domain-manager     # serve API gateway from our own domain
  - serverless-spec-uploader      # upload spec to S3 after deployment

package:
  exclude:
    - .gitignore
    - .git/**

functions:

  root:
    handler: handlers/get_root.index
    environment:
      CENTURY_ADMIN_EMAIL: ${file(keys.yml):CENTURY_ADMIN_EMAIL}
      CENTURY_ADMIN_PASSWORD: ${file(keys.yml):CENTURY_ADMIN_PASSWORD}
      AWS_PROFILE: serverless
    events:
      - http:
          path: /
          method: get
          cors: true
          documentation:
            summary: Get a list of class IDs available through Story
            tags: 
              - class
            methodResponses:
              - statusCode: "200"
                description: Classes were fetched successfully
                responseModels:
                  "application/json": RootResponse

  classes:
    handler: handlers/get_classes.index
    environment:
      CENTURY_ADMIN_EMAIL: ${file(keys.yml):CENTURY_ADMIN_EMAIL}
      CENTURY_ADMIN_PASSWORD: ${file(keys.yml):CENTURY_ADMIN_PASSWORD}
      AWS_PROFILE: serverless
    events:
      - http:
          path: /class
          method: get
          cors: true
          documentation:
            summary: Get details for all classes with the given IDs
            tags: 
              - class
            queryParams:
              - name: ids
                description: Class IDs to fetch
            methodResponses:
              - statusCode: "200"
                description: Classes were fetched successfully
                responseModels:
                  "application/json": ClassResponse

  teachers:
    handler: handlers/get_teachers.index
    environment:
      CENTURY_ADMIN_EMAIL: ${file(keys.yml):CENTURY_ADMIN_EMAIL}
      CENTURY_ADMIN_PASSWORD: ${file(keys.yml):CENTURY_ADMIN_PASSWORD}
      AWS_PROFILE: serverless
    events:
      - http:
          path: /teacher
          method: get
          cors: true
          documentation:
            summary: Get all teachers for the given IDs
            tags: 
              - class
            queryParams:
              - name: ids
                description: Teacher IDs to fetch
            methodResponses:
              - statusCode: "200"
                description: Teachers were fetched successfully
                responseModels:
                  "application/json": TeacherResponse

  courses:
    handler: handlers/get_courses.index
    environment:
      CENTURY_ADMIN_EMAIL: ${file(keys.yml):CENTURY_ADMIN_EMAIL}
      CENTURY_ADMIN_PASSWORD: ${file(keys.yml):CENTURY_ADMIN_PASSWORD}
      AWS_PROFILE: serverless
    events:
      - http:
          path: /course
          method: get
          cors: true
          documentation:
            summary: Get all courses for the given IDs
            tags: 
              - class
            queryParams:
              - name: ids
                description: Course IDs to fetch
            methodResponses:
              - statusCode: "200"
                description: Courses were fetched successfully
                responseModels:
                  "application/json": CourseResponse

resources:
  Resources:

    # Name the API something more memorable in API Gateway
    ApiGatewayRestApi:
      Type: AWS::ApiGateway::RestApi
      Properties:
        Name: Class Service

    # Add a proxy resource in API Gateway to represent the API spec
    # TODO: Move this into serverless-spec-uploader
    ProxyResource:
      Type: AWS::ApiGateway::Resource
      Properties:
        ParentId:
          Fn::GetAtt:
            - ApiGatewayRestApi
            - RootResourceId
        PathPart: spec 
        RestApiId:
          Ref: ApiGatewayRestApi
          
    # Add a proxy method to API Gateway to retrieve the spec from S3
    # TODO: Move this into serverless-spec-uploader
    ProxyMethod:
      Type: AWS::ApiGateway::Method
      Properties:
        ResourceId:
          Ref: ProxyResource
        RestApiId:
          Ref: ApiGatewayRestApi
        HttpMethod: GET 
        AuthorizationType: NONE
        MethodResponses:
          - StatusCode: "200"
            ResponseParameters: 
              method.response.header.Access-Control-Allow-Origin: true
        Integration:
          IntegrationHttpMethod: GET
          Type: HTTP
          Uri: https://s3.eu-west-2.amazonaws.com/${self:custom.spec_bucket}/${self:service}.json
          IntegrationResponses:
            - StatusCode: "200"
              ResponseParameters:
                method.response.header.Access-Control-Allow-Origin : "'*'"

custom:
  customDomain:
    domainName: api.axontoken.com
    basePath: material
    stage: ${self:provider.stage}
    createRoute53Record: true

  documentation: ${file(docs.yml)}

  spec_bucket: story-ai-specs
